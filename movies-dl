#!/bin/env python

# imports
from modules import colors as c
from modules.clear import clear
from modules.convert_string import StringConverter as sc
from modules.error_handling import ErrorFunctions as ef
from argparse import ArgumentParser, RawDescriptionHelpFormatter
from GrabMovie import MakeSoup, FindMovie
from time import sleep

class MoviesDl():

    def __init__(self, search_query):
        self.search_query = search_query


    def selectMovie(self):
        clear()

        result_movie = MakeSoup(self.search_query).searchResultsPageSoup()
        fm = FindMovie()

        if result_movie['success'] != True:
            print(result_movie['error_msg'])
            exit(0)
        elif result_movie['success'] == True:
            movie_results = fm.listMovieResults(result_movie['data'])

        if not 'data' in movie_results:
            print(movie_results['return_msg'])
            exit(0)
        elif 'data' in movie_results:
            res = movie_results['data']
            for movie in res:
                print("[{}{}{}] {}-->{} {}{}{}".format(
                      c.GREEN, movie, c.RESET,
                      c.RED, c.RESET,
                      c.BLUE, ''.join(res[movie]), c.RESET))

        movie_selected = {}
        try:
            retry_flag = True

            while retry_flag == True:
                selection = int(input("\n{}Enter Choice:{} ".format(c.RED, c.RESET)))

                if not selection in res:
                    print("\n{}Invalid Range.{}\n".format(c.RED, c.RESET))
                    exit(0)
                elif selection in res:
                    for title in res[selection]:
                        clear()

                        retry_flag = False
                        return {'title': title, 'movie_page_url': res[selection][title]}
        except KeyboardInterrupt:
            print('\nStopped!')

    
    def selectQuality(self, movie):
        clear()

        print("{}\"{}\"{} has been selected.\n".format(
              c.GREEN, movie['title'], c.RESET))

        fmt_mpage_query = movie['movie_page_url'].split('/')[-1]
        result_quality = MakeSoup(fmt_mpage_query).movieQualityPageSoup()
        fm = FindMovie()

        if result_quality['success'] != True:
            print(result_quality['error_msg'])
            exit(0)
        elif result_quality['success'] == True:
            quality_results = fm.listVideoQualities(result_quality['data'])
            
        if not 'data' in quality_results:
            print(quality_results['return_msg'])
            exit(0)
        elif 'data' in quality_results:
            res = quality_results['data']
            for quality in res:
                print("[{}{}{}] {}-->{} {}{}{}".format(
                      c.GREEN, quality, c.RESET,
                      c.RED, c.RESET,
                      c.BLUE, ''.join(res[quality]), c.RESET))
        
        quality_selected = {}
        try:
            retry_flag = True

            while retry_flag == True:
                selection = int(input("\n{}Enter Choice:{} ".format(c.RED, c.RESET)))

                if not selection in res:
                    print("\n{}Invalid Range.{}\n".format(c.RED, c.RESET))
                    exit(0)
                elif selection in res:
                    for quality in res[selection]:
                        clear()

                        retry_flag = False
                        return {'quality': quality, 'torrent_url': res[selection][quality]}
        except KeyboardInterrupt:
            print('\nStopped!')


    def getTorrent(self, torrent_info):
        clear()

        fm = FindMovie()
        print("{}\"{}\"{} has been selected.\n".format(
              c.GREEN, torrent_info['quality'], c.RESET))
        
        torrent_download = fm.downloadMovieTorrent(torrent_info['torrent_url'])
        if torrent_download['success'] != True:
            print(torrent_download['return_msg'])
            exit(0)
        elif torrent_download['success'] == True:
            clear()
            
            torrent_path = torrent_download['data']
            print("{}Download successful.{}\n".format(c.GREEN, c.RESET))
            print("{}File Location:{} {}\"{}\"{}".format(
                  c.RED, c.RESET, c.GREEN, torrent_path, c.RESET))


def main(query):
    md = MoviesDl(query)

    movie = md.selectMovie()
    quality = md.selectQuality(movie)
    torrent = md.getTorrent(quality)


if __name__ == '__main__':
    parser = ArgumentParser(description="Download Movies For Free From The Terminal",
                            formatter_class=RawDescriptionHelpFormatter)

    parser.add_argument('-s', '--search',
                        nargs=1, metavar='SEARCH',
                        action='store',
                        help="Searches for the movie. (e.g. --search 'avengers')")

    parser.add_argument('-d', '--download',
                        action='store_true',
                        help='Downloads torrent files in the torrents directory')

    parser.add_argument('-c', '--checkstatus',
                        action='store_true',
                        help='Checks torrent status on qbittorrent localhost server')

    parser.add_argument('-r', '--remove',
                        action='store_true',
                        help='Deletes torrents')

    args = parser.parse_args()
    if args.search:
        main(''.join(args.search)) 
